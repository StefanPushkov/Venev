
AVRASM ver. 2.1.30  C:\Users\Михаил\Documents\Новая папка\List\1.asm Sat May 23 23:14:23 2015

C:\Users\Михаил\Documents\Новая папка\List\1.asm(1072): warning: Register r5 already defined by the .DEF directive
C:\Users\Михаил\Documents\Новая папка\List\1.asm(1073): warning: Register r4 already defined by the .DEF directive
C:\Users\Михаил\Documents\Новая папка\List\1.asm(1074): warning: Register r7 already defined by the .DEF directive
C:\Users\Михаил\Documents\Новая папка\List\1.asm(1075): warning: Register r6 already defined by the .DEF directive
C:\Users\Михаил\Documents\Новая папка\List\1.asm(1076): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rs_timer_cloc=R5
                 	.DEF _det_taym_cloc=R4
                 	.DEF _rs_wr_index=R7
                 	.DEF _rs_rd_index=R6
                 	.DEF _rs_counter=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0074 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0097 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x23:
000034 0201
000035 0201
000036 0201
000037 0201      	.DB  0x1,0x2,0x1,0x2,0x1,0x2,0x1,0x2
000038 0201      	.DB  0x1,0x2
                 
                 __GLOBAL_INI_TBL:
000039 0001      	.DW  0x01
00003a 0002      	.DW  0x02
00003b 0066      	.DW  __REG_BIT_VARS*2
                 
00003c 000a      	.DW  0x0A
00003d 0188      	.DW  _test
00003e 0068      	.DW  _0x23*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000047 e1f8      	LDI  R31,0x18
000048 bdf1      	OUT  WDTCR,R31
000049 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 0133 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#include "mode_bus.c"
                 ;/*
                 ;
                 ;MOD_BUS V 2.0
                 ;
                 ;
                 ;// USART initialization
                 ;// Communication Parameters: 8 Data, 1 Stop, No Parity
                 ;// USART Receiver: On
                 ;// USART Transmitter: On
                 ;// USART Mode: Asynchronous
                 ;// USART Baud Rate: 9600
                 ;UCSRA=0x00;
                 ;UCSRB=0xD8;
                 ;UCSRC=0x86;
                 ;UBRRH=0x00;
                 ;UBRRL=0x33;
                 ;
                 ;*/
                 ;
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;#define RS_485 PORTA.0
                 ;
                 ;#define timer_reset TCNT0 = 0
                 ;#define timer_start TCCR0 = 0x05
                 ;
                 ;unsigned char rs_timer_cloc;
                 ;unsigned char det_taym_cloc;
                 ;
                 ;// USART Receiver buffer
                 ;#define RS_BUFFER_SIZE 40
                 ;char rs_buffer[RS_BUFFER_SIZE];
                 ;
                 ;
                 ;
                 ;unsigned char rs_wr_index,rs_rd_index,rs_counter;
                 ;
                 ;bit rs_buffer_overflow;
                 ;
                 ;
                 ;
                 ;void rs_clear (void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _rs_clear:
                 ;
                 ;  rs_wr_index = 0;
000070 2477      	CLR  R7
                 ;  rs_rd_index = 0;
000071 2466      	CLR  R6
                 ;  rs_counter  = 0;
000072 2499      	CLR  R9
                 ;
                 ;}
000073 9508      	RET
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ;{
                 _usart_rx_isr:
000074 93ea      	ST   -Y,R30
000075 93fa      	ST   -Y,R31
000076 b7ef      	IN   R30,SREG
000077 93ea      	ST   -Y,R30
                 ;char status,data;
                 ;status=UCSRA;
000078 931a      	ST   -Y,R17
000079 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00007a b11b      	IN   R17,11
                 ;data=UDR;
00007b b10c      	IN   R16,12
                 ;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00007c 2fe1      	MOV  R30,R17
00007d 71ec      	ANDI R30,LOW(0x1C)
00007e f489      	BRNE _0x3
                 ;   {
                 ;   rs_buffer[rs_wr_index++]=data;
00007f 2de7      	MOV  R30,R7
000080 9473      	INC  R7
000081 e0f0      	LDI  R31,0
000082 5ae0      	SUBI R30,LOW(-_rs_buffer)
000083 4ffe      	SBCI R31,HIGH(-_rs_buffer)
000084 8300      	ST   Z,R16
                 ;#if RS_BUFFER_SIZE == 256
                 ;   // special case for receiver buffer size=256
                 ;   if (++rs_counter == 0) rs_buffer_overflow=1;
                 ;#else
                 ;   if (rs_wr_index == RS_BUFFER_SIZE) rs_wr_index=0;
000085 e2e8      	LDI  R30,LOW(40)
000086 15e7      	CP   R30,R7
000087 f409      	BRNE _0x4
000088 2477      	CLR  R7
                 ;   if (++rs_counter == RS_BUFFER_SIZE)
                 _0x4:
000089 9493      	INC  R9
00008a e2e8      	LDI  R30,LOW(40)
00008b 15e9      	CP   R30,R9
00008c f419      	BRNE _0x5
                 ;      {
                 ;      rs_counter=0;
00008d 2499      	CLR  R9
                 ;      rs_buffer_overflow=1;
00008e 9468      	SET
00008f f820      	BLD  R2,0
                 ;      }
                 ;#endif
                 ;   }
                 _0x5:
                 ;}
                 _0x3:
000090 9109      	LD   R16,Y+
000091 9119      	LD   R17,Y+
000092 91e9      	LD   R30,Y+
000093 bfef      	OUT  SREG,R30
000094 91f9      	LD   R31,Y+
000095 91e9      	LD   R30,Y+
000096 9518      	RETI
                 ;
                 ;
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;
                 ;
                 ;#pragma used+
                 ;char getchar(void)
                 ;{
                 ;char data;
                 ;while (rs_counter==0);
                 ;	data -> R17
                 ;data=rs_buffer[rs_rd_index++];
                 ;#if RS_BUFFER_SIZE != 256
                 ;if (rs_rd_index == RS_BUFFER_SIZE) rs_rd_index=0;
                 ;#endif
                 ;#asm("cli")
                 ;--rs_counter;
                 ;#asm("sei")
                 ;return data;
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ;{
                 _usart_tx_isr:
000097 920a      	ST   -Y,R0
000098 921a      	ST   -Y,R1
000099 92fa      	ST   -Y,R15
00009a 936a      	ST   -Y,R22
00009b 937a      	ST   -Y,R23
00009c 938a      	ST   -Y,R24
00009d 939a      	ST   -Y,R25
00009e 93aa      	ST   -Y,R26
00009f 93ba      	ST   -Y,R27
0000a0 93ea      	ST   -Y,R30
0000a1 93fa      	ST   -Y,R31
0000a2 b7ef      	IN   R30,SREG
0000a3 93ea      	ST   -Y,R30
                 ;if (rs_counter)
0000a4 2099      	TST  R9
0000a5 f069      	BREQ _0xA
                 ;   {
                 ;   --rs_counter;
0000a6 949a      	DEC  R9
                 ;   UDR=rs_buffer[rs_rd_index++];
0000a7 2de6      	MOV  R30,R6
0000a8 9463      	INC  R6
0000a9 e0f0      	LDI  R31,0
0000aa 5ae0      	SUBI R30,LOW(-_rs_buffer)
0000ab 4ffe      	SBCI R31,HIGH(-_rs_buffer)
0000ac 81e0      	LD   R30,Z
0000ad b9ec      	OUT  0xC,R30
                 ;#if RS_BUFFER_SIZE != 256
                 ;   if (rs_rd_index == RS_BUFFER_SIZE) rs_rd_index=0;
0000ae e2e8      	LDI  R30,LOW(40)
0000af 15e6      	CP   R30,R6
0000b0 f409      	BRNE _0xB
0000b1 2466      	CLR  R6
                 ;#endif
                 ;   }
                 _0xB:
                 ;   else{ RS_485 = 0;
0000b2 c002      	RJMP _0xC
                 _0xA:
0000b3 98d8      	CBI  0x1B,0
                 ;         rs_clear();}
0000b4 dfbb      	RCALL _rs_clear
                 _0xC:
                 ;}
0000b5 91e9      	LD   R30,Y+
0000b6 bfef      	OUT  SREG,R30
0000b7 91f9      	LD   R31,Y+
0000b8 91e9      	LD   R30,Y+
0000b9 91b9      	LD   R27,Y+
0000ba 91a9      	LD   R26,Y+
0000bb 9199      	LD   R25,Y+
0000bc 9189      	LD   R24,Y+
0000bd 9179      	LD   R23,Y+
0000be 9169      	LD   R22,Y+
0000bf 90f9      	LD   R15,Y+
0000c0 9019      	LD   R1,Y+
0000c1 9009      	LD   R0,Y+
0000c2 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#pragma used+
                 ;void putchar(char c)
                 ;{
                 ;while (rs_counter == RS_BUFFER_SIZE);
                 ;	c -> Y+0
                 ;#asm("cli")
                 ;if (rs_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
                 ;   {
                 ;   rs_buffer[rs_wr_index++]=c;
                 ;#if RS_BUFFER_SIZE != 256
                 ;   if (rs_wr_index == RS_BUFFER_SIZE) rs_wr_index=0;
                 ;#endif
                 ;   ++rs_counter;
                 ;   }
                 ;else
                 ;   UDR=c;
                 ;#asm("sei")
                 ;}
                 ;#pragma used-
                 ;#endif
                 ;
                 ;#pragma used+
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void timer (unsigned char argumet_timer)
                 ;{
                 ; timer_reset;
                 ;	argumet_timer -> Y+0
                 ; rs_timer_cloc = argumet_timer;
                 ; det_taym_cloc = 0;
                 ; timer_start;
                 ;
                 ;}
                 ;
                 ;
                 ;unsigned int CRCode(unsigned char * crc_point, unsigned char length)
                 ;{
                 _CRCode:
                 ;    unsigned char j, flag;
                 ;    unsigned int  crc = 0xFFFF;
                 ;
                 ;    while(length--)
0000c3 93aa      	ST   -Y,R26
0000c4 940e 0182 	CALL __SAVELOCR4
                 ;	*crc_point -> Y+5
                 ;	length -> Y+4
                 ;	j -> R17
                 ;	flag -> R16
                 ;	crc -> R18,R19
                +
0000c6 ef2f     +LDI R18 , LOW ( - 1 )
0000c7 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                 _0x17:
0000c8 81ec      	LDD  R30,Y+4
0000c9 50e1      	SUBI R30,LOW(1)
0000ca 83ec      	STD  Y+4,R30
0000cb 5fef      	SUBI R30,-LOW(1)
0000cc f0c9      	BREQ _0x19
                 ;    {
                 ;        crc ^= *crc_point++;
0000cd 81ad      	LDD  R26,Y+5
0000ce 81be      	LDD  R27,Y+5+1
0000cf 91ed      	LD   R30,X+
0000d0 83ad      	STD  Y+5,R26
0000d1 83be      	STD  Y+5+1,R27
0000d2 e0f0      	LDI  R31,0
                +
0000d3 272e     +EOR R18 , R30
0000d4 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ;        for (j = 0; j < 8; j++)
0000d5 e010      	LDI  R17,LOW(0)
                 _0x1B:
0000d6 3018      	CPI  R17,8
0000d7 f468      	BRSH _0x1C
                 ;        {
                 ;            flag = (unsigned char)(crc & 0x0001);
0000d8 2fe2      	MOV  R30,R18
0000d9 70e1      	ANDI R30,LOW(0x1)
0000da 2f0e      	MOV  R16,R30
                 ;            crc >>= 1;
0000db 9536      	LSR  R19
0000dc 9527      	ROR  R18
                 ;            if (flag > 0)
0000dd 3001      	CPI  R16,1
0000de f020      	BRLO _0x1D
                 ;                crc ^= 0xA001;
0000df e0e1      	LDI  R30,LOW(40961)
0000e0 eaf0      	LDI  R31,HIGH(40961)
                +
0000e1 272e     +EOR R18 , R30
0000e2 273f     +EOR R19 , R31
                 	__EORWRR 18,19,30,31
                 ;        }
                 _0x1D:
0000e3 5f1f      	SUBI R17,-1
0000e4 cff1      	RJMP _0x1B
                 _0x1C:
                 ;    }
0000e5 cfe2      	RJMP _0x17
                 _0x19:
                 ;    return crc;
0000e6 01f9      	MOVW R30,R18
0000e7 940e 0187 	CALL __LOADLOCR4
0000e9 9627      	ADIW R28,7
0000ea 9508      	RET
                 ; }
                 ;
                 ;
                 ; void transmit_rs (unsigned char rs_id, unsigned char rs_func, unsigned int rs_adr, unsigned int rs_colvo,)
                 ; {
                 ;
                 ; rs_buffer[0] = rs_id;
                 ;	rs_id -> Y+5
                 ;	rs_func -> Y+4
                 ;	rs_adr -> Y+2
                 ;	rs_colvo -> Y+0
                 ; rs_buffer[1] = rs_func;
                 ; rs_buffer[2] = rs_adr >> 8;
                 ; rs_buffer[3] = rs_adr ;
                 ; rs_buffer[4] = rs_colvo >> 8;
                 ; rs_buffer[5] = rs_colvo ;
                 ;
                 ;// rs_buffer[7] = CRCode(rs_buffer, 6);  >> 8;
                 ;// rs_buffer[6] = CRCode(rs_buffer, 6);
                 ;
                 ; rs_buffer[6]= (CRCode(rs_buffer, 6) & 0x00FF);
                 ; rs_buffer[7]= (CRCode(rs_buffer, 6) >>8);
                 ;
                 ; rs_counter = 7;
                 ;
                 ; rs_rd_index ++;
                 ;
                 ; RS_485 = 1;
                 ;
                 ; UDR = rs_id;
                 ;
                 ; }
                 ;
                 ; void transmit_rs_pac (unsigned char rs_id, unsigned char rs_func, unsigned int rs_adr, unsigned int rs_colvo, unsigned char * data_point, unsigned char data_length )
                 ; {
                 _transmit_rs_pac:
                 ;
                 ; unsigned char i;
                 ;
                 ; rs_buffer[0] = rs_id;
0000eb 93aa      	ST   -Y,R26
0000ec 931a      	ST   -Y,R17
                 ;	rs_id -> Y+9
                 ;	rs_func -> Y+8
                 ;	rs_adr -> Y+6
                 ;	rs_colvo -> Y+4
                 ;	*data_point -> Y+2
                 ;	data_length -> Y+1
                 ;	i -> R17
0000ed 85e9      	LDD  R30,Y+9
0000ee 93e0 0160 	STS  _rs_buffer,R30
                 ; rs_buffer[1] = rs_func;
0000f0 85e8      	LDD  R30,Y+8
                +
0000f1 93e0 0161+STS _rs_buffer + ( 1 ) , R30
                 	__PUTB1MN _rs_buffer,1
                 ; rs_buffer[2] = rs_adr >> 8;
0000f3 81ef      	LDD  R30,Y+7
                +
0000f4 93e0 0162+STS _rs_buffer + ( 2 ) , R30
                 	__PUTB1MN _rs_buffer,2
                 ; rs_buffer[3] = rs_adr ;
0000f6 81ee      	LDD  R30,Y+6
                +
0000f7 93e0 0163+STS _rs_buffer + ( 3 ) , R30
                 	__PUTB1MN _rs_buffer,3
                 ; rs_buffer[4] = rs_colvo >> 8;
0000f9 81ed      	LDD  R30,Y+5
                +
0000fa 93e0 0164+STS _rs_buffer + ( 4 ) , R30
                 	__PUTB1MN _rs_buffer,4
                 ; rs_buffer[5] = rs_colvo ;
0000fc 81ec      	LDD  R30,Y+4
                +
0000fd 93e0 0165+STS _rs_buffer + ( 5 ) , R30
                 	__PUTB1MN _rs_buffer,5
                 ;
                 ;    for(i = 0; i == data_length ;i++)
0000ff e010      	LDI  R17,LOW(0)
                 _0x21:
000100 81e9      	LDD  R30,Y+1
000101 17e1      	CP   R30,R17
000102 f471      	BRNE _0x22
                 ;   {
                 ;   rs_buffer[6+i] = * data_point++;
000103 940e 0177 	CALL SUBOPT_0x0
                +
000105 59ea     +SUBI R30 , LOW ( - _rs_buffer - ( 6 ) )
000106 4ffe     +SBCI R31 , HIGH ( - _rs_buffer - ( 6 ) )
                 	__ADDW1MN _rs_buffer,6
000107 010f      	MOVW R0,R30
000108 81aa      	LDD  R26,Y+2
000109 81bb      	LDD  R27,Y+2+1
00010a 91ed      	LD   R30,X+
00010b 83aa      	STD  Y+2,R26
00010c 83bb      	STD  Y+2+1,R27
00010d 01d0      	MOVW R26,R0
00010e 93ec      	ST   X,R30
                 ;   }
00010f 5f1f      	SUBI R17,-1
000110 cfef      	RJMP _0x21
                 _0x22:
                 ;    rs_buffer[7+i] = (CRCode(rs_buffer, (6+i)) & 0x00FF);
000111 940e 0177 	CALL SUBOPT_0x0
                +
000113 59e9     +SUBI R30 , LOW ( - _rs_buffer - ( 7 ) )
000114 4ffe     +SBCI R31 , HIGH ( - _rs_buffer - ( 7 ) )
                 	__ADDW1MN _rs_buffer,7
000115 93ff      	PUSH R31
000116 93ef      	PUSH R30
000117 940e 017a 	CALL SUBOPT_0x1
000119 91af      	POP  R26
00011a 91bf      	POP  R27
00011b 93ec      	ST   X,R30
                 ;    rs_buffer[8+i] = (CRCode(rs_buffer, (6+i)) >> 8);
00011c 940e 0177 	CALL SUBOPT_0x0
                +
00011e 59e8     +SUBI R30 , LOW ( - _rs_buffer - ( 8 ) )
00011f 4ffe     +SBCI R31 , HIGH ( - _rs_buffer - ( 8 ) )
                 	__ADDW1MN _rs_buffer,8
000120 93ff      	PUSH R31
000121 93ef      	PUSH R30
000122 940e 017a 	CALL SUBOPT_0x1
000124 2fef      	MOV  R30,R31
000125 e0f0      	LDI  R31,0
000126 91af      	POP  R26
000127 91bf      	POP  R27
000128 93ec      	ST   X,R30
                 ;
                 ;    rs_counter = (10+i);
000129 2fe1      	MOV  R30,R17
00012a 5fe6      	SUBI R30,-LOW(10)
00012b 2e9e      	MOV  R9,R30
                 ;    rs_rd_index ++;
00012c 9463      	INC  R6
                 ;    UDR = rs_id;
00012d 85e9      	LDD  R30,Y+9
00012e b9ec      	OUT  0xC,R30
                 ;   // putchar(
                 ; }
00012f 8118      	LDD  R17,Y+0
000130 962a      	ADIW R28,10
000131 9508      	RET
                 ;
                 ;#pragma used-
                 ;
                 ;#asm("sei")
000132 9478      	sei
                 ;
                 ;#include <stdio.h>
                 ;
                 ;//unsigned char test[10] = {1,2,3,4,5,6,7,8,9,0};
                 ;unsigned char test[10] = {1,2,1,2,1,2,1,2,1,2};
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _main:
                 ; 0000 000D // Declare your local variables here
                 ; 0000 000E 
                 ; 0000 000F // Input/Output Ports initialization
                 ; 0000 0010 // Port A initialization
                 ; 0000 0011 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0012 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0013 PORTA=0x00;
000133 e0e0      	LDI  R30,LOW(0)
000134 bbeb      	OUT  0x1B,R30
                 ; 0000 0014 DDRA=0xFF;
000135 efef      	LDI  R30,LOW(255)
000136 bbea      	OUT  0x1A,R30
                 ; 0000 0015 
                 ; 0000 0016 // Port B initialization
                 ; 0000 0017 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0018 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0019 PORTB=0x00;
000137 e0e0      	LDI  R30,LOW(0)
000138 bbe8      	OUT  0x18,R30
                 ; 0000 001A DDRB=0x00;
000139 bbe7      	OUT  0x17,R30
                 ; 0000 001B 
                 ; 0000 001C // Port C initialization
                 ; 0000 001D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 001E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 001F PORTC=0x00;
00013a bbe5      	OUT  0x15,R30
                 ; 0000 0020 DDRC=0x00;
00013b bbe4      	OUT  0x14,R30
                 ; 0000 0021 
                 ; 0000 0022 // Port D initialization
                 ; 0000 0023 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0024 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0025 PORTD=0x00;
00013c bbe2      	OUT  0x12,R30
                 ; 0000 0026 DDRD=0x00;
00013d bbe1      	OUT  0x11,R30
                 ; 0000 0027 
                 ; 0000 0028 // Timer/Counter 0 initialization
                 ; 0000 0029 // Clock source: System Clock
                 ; 0000 002A // Clock value: Timer 0 Stopped
                 ; 0000 002B // Mode: Normal top=0xFF
                 ; 0000 002C // OC0 output: Disconnected
                 ; 0000 002D TCCR0=0x00;
00013e bfe3      	OUT  0x33,R30
                 ; 0000 002E TCNT0=0x00;
00013f bfe2      	OUT  0x32,R30
                 ; 0000 002F OCR0=0x00;
000140 bfec      	OUT  0x3C,R30
                 ; 0000 0030 
                 ; 0000 0031 // Timer/Counter 1 initialization
                 ; 0000 0032 // Clock source: System Clock
                 ; 0000 0033 // Clock value: Timer1 Stopped
                 ; 0000 0034 // Mode: Normal top=0xFFFF
                 ; 0000 0035 // OC1A output: Discon.
                 ; 0000 0036 // OC1B output: Discon.
                 ; 0000 0037 // Noise Canceler: Off
                 ; 0000 0038 // Input Capture on Falling Edge
                 ; 0000 0039 // Timer1 Overflow Interrupt: Off
                 ; 0000 003A // Input Capture Interrupt: Off
                 ; 0000 003B // Compare A Match Interrupt: Off
                 ; 0000 003C // Compare B Match Interrupt: Off
                 ; 0000 003D TCCR1A=0x00;
000141 bdef      	OUT  0x2F,R30
                 ; 0000 003E TCCR1B=0x00;
000142 bdee      	OUT  0x2E,R30
                 ; 0000 003F TCNT1H=0x00;
000143 bded      	OUT  0x2D,R30
                 ; 0000 0040 TCNT1L=0x00;
000144 bdec      	OUT  0x2C,R30
                 ; 0000 0041 ICR1H=0x00;
000145 bde7      	OUT  0x27,R30
                 ; 0000 0042 ICR1L=0x00;
000146 bde6      	OUT  0x26,R30
                 ; 0000 0043 OCR1AH=0x00;
000147 bdeb      	OUT  0x2B,R30
                 ; 0000 0044 OCR1AL=0x00;
000148 bdea      	OUT  0x2A,R30
                 ; 0000 0045 OCR1BH=0x00;
000149 bde9      	OUT  0x29,R30
                 ; 0000 0046 OCR1BL=0x00;
00014a bde8      	OUT  0x28,R30
                 ; 0000 0047 
                 ; 0000 0048 // Timer/Counter 2 initialization
                 ; 0000 0049 // Clock source: System Clock
                 ; 0000 004A // Clock value: Timer2 Stopped
                 ; 0000 004B // Mode: Normal top=0xFF
                 ; 0000 004C // OC2 output: Disconnected
                 ; 0000 004D ASSR=0x00;
00014b bde2      	OUT  0x22,R30
                 ; 0000 004E TCCR2=0x00;
00014c bde5      	OUT  0x25,R30
                 ; 0000 004F TCNT2=0x00;
00014d bde4      	OUT  0x24,R30
                 ; 0000 0050 OCR2=0x00;
00014e bde3      	OUT  0x23,R30
                 ; 0000 0051 
                 ; 0000 0052 // External Interrupt(s) initialization
                 ; 0000 0053 // INT0: Off
                 ; 0000 0054 // INT1: Off
                 ; 0000 0055 // INT2: Off
                 ; 0000 0056 MCUCR=0x00;
00014f bfe5      	OUT  0x35,R30
                 ; 0000 0057 MCUCSR=0x00;
000150 bfe4      	OUT  0x34,R30
                 ; 0000 0058 
                 ; 0000 0059 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005A TIMSK=0x00;
000151 bfe9      	OUT  0x39,R30
                 ; 0000 005B 
                 ; 0000 005C // USART initialization
                 ; 0000 005D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 005E // USART Receiver: On
                 ; 0000 005F // USART Transmitter: On
                 ; 0000 0060 // USART Mode: Asynchronous
                 ; 0000 0061 // USART Baud Rate: 9600
                 ; 0000 0062 UCSRA=0x00;
000152 b9eb      	OUT  0xB,R30
                 ; 0000 0063 UCSRB=0xD8;
000153 ede8      	LDI  R30,LOW(216)
000154 b9ea      	OUT  0xA,R30
                 ; 0000 0064 UCSRC=0x86;
000155 e8e6      	LDI  R30,LOW(134)
000156 bde0      	OUT  0x20,R30
                 ; 0000 0065 UBRRH=0x00;
000157 e0e0      	LDI  R30,LOW(0)
000158 bde0      	OUT  0x20,R30
                 ; 0000 0066 UBRRL=0x33;
000159 e3e3      	LDI  R30,LOW(51)
00015a b9e9      	OUT  0x9,R30
                 ; 0000 0067 
                 ; 0000 0068 // Analog Comparator initialization
                 ; 0000 0069 // Analog Comparator: Off
                 ; 0000 006A // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 006B ACSR=0x80;
00015b e8e0      	LDI  R30,LOW(128)
00015c b9e8      	OUT  0x8,R30
                 ; 0000 006C SFIOR=0x00;
00015d e0e0      	LDI  R30,LOW(0)
00015e bfe0      	OUT  0x30,R30
                 ; 0000 006D 
                 ; 0000 006E // ADC initialization
                 ; 0000 006F // ADC disabled
                 ; 0000 0070 ADCSRA=0x00;
00015f b9e6      	OUT  0x6,R30
                 ; 0000 0071 
                 ; 0000 0072 // SPI initialization
                 ; 0000 0073 // SPI disabled
                 ; 0000 0074 SPCR=0x00;
000160 b9ed      	OUT  0xD,R30
                 ; 0000 0075 
                 ; 0000 0076 // TWI initialization
                 ; 0000 0077 // TWI disabled
                 ; 0000 0078 TWCR=0x00;
000161 bfe6      	OUT  0x36,R30
                 ; 0000 0079 
                 ; 0000 007A #asm("sei")
000162 9478      	sei
                 ; 0000 007B 
                 ; 0000 007C 
                 ; 0000 007D while (1)
                 ; 0000 007E       {
                 ; 0000 007F       transmit_rs_pac(1,3,0,10,test,10);
000163 e0e1      	LDI  R30,LOW(1)
000164 93ea      	ST   -Y,R30
000165 e0e3      	LDI  R30,LOW(3)
000166 93ea      	ST   -Y,R30
000167 e0e0      	LDI  R30,LOW(0)
000168 e0f0      	LDI  R31,HIGH(0)
000169 93fa      	ST   -Y,R31
00016a 93ea      	ST   -Y,R30
00016b e0ea      	LDI  R30,LOW(10)
00016c e0f0      	LDI  R31,HIGH(10)
00016d 93fa      	ST   -Y,R31
00016e 93ea      	ST   -Y,R30
00016f e8e8      	LDI  R30,LOW(_test)
000170 e0f1      	LDI  R31,HIGH(_test)
000171 93fa      	ST   -Y,R31
000172 93ea      	ST   -Y,R30
000173 e0aa      	LDI  R26,LOW(10)
000174 df76      	RCALL _transmit_rs_pac
                 ; 0000 0080       //delay_ms(1000);
                 ; 0000 0081       while (1){}
                 _0x27:
000175 cfff      	RJMP _0x27
                 ; 0000 0082       }
                 ; 0000 0083 }
                 _0x2A:
000176 cfff      	RJMP _0x2A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rs_buffer:
000160           	.BYTE 0x28
                 _test:
000188           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000177 2fe1      	MOV  R30,R17
000178 e0f0      	LDI  R31,0
000179 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00017a e6e0      	LDI  R30,LOW(_rs_buffer)
00017b e0f1      	LDI  R31,HIGH(_rs_buffer)
00017c 93fa      	ST   -Y,R31
00017d 93ea      	ST   -Y,R30
00017e 2fa1      	MOV  R26,R17
00017f 5faa      	SUBI R26,-LOW(6)
000180 940c 00c3 	JMP  _CRCode
                 
                 
                 	.CSEG
                 __SAVELOCR4:
000182 933a      	ST   -Y,R19
                 __SAVELOCR3:
000183 932a      	ST   -Y,R18
                 __SAVELOCR2:
000184 931a      	ST   -Y,R17
000185 930a      	ST   -Y,R16
000186 9508      	RET
                 
                 __LOADLOCR4:
000187 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000188 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000189 8119      	LDD  R17,Y+1
00018a 8108      	LD   R16,Y
00018b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   3 r2 :   1 r3 :   0 r4 :   0 r5 :   0 r6 :   6 r7 :   5 
r8 :   0 r9 :   7 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   8 r17:  17 r18:   8 r19:   6 r20:   0 r21:   0 r22:   4 r23:   2 
r24:   9 r25:   4 r26:  17 r27:  10 r28:   3 r29:   1 r30: 143 r31:  33 
x  :   8 y  :  74 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   7 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   0 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  23 ld    :  21 ldd   :  17 ldi   :  47 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   1 mov   :  10 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  50 pop   :   4 push  :   4 rcall :   2 ret   :   6 
reti  :   2 rjmp  :   7 rol   :   0 ror   :   1 sbc   :   0 sbci  :   5 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  41 std   :   5 sts   :   6 sub   :   0 subi  :  11 swap  :   0 
tst   :   1 wdr   :   0 
Instructions used: 42 out of 116 (36.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000318    748     44    792   16384   4.8%
[.dseg] 0x000060 0x000192      0     50     50    1119   4.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
