<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0061)http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/ -->
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="ru-RU" class="chrome  win"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7">
<title>STM32 GPIO. Использование StdPeriph_Lib</title>
<script type="text/javascript" src="./STM32 GPIO. Использование StdPeriph_Lib_files/script.js"></script>
<link rel="stylesheet" href="./STM32 GPIO. Использование StdPeriph_Lib_files/style.css" type="text/css" media="screen">
<!--[if IE 6]><link rel="stylesheet" href="http://mycontroller.ru/wp-content/themes/MyController/style.ie6.css" type="text/css" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="http://mycontroller.ru/wp-content/themes/MyController/style.ie7.css" type="text/css" media="screen" /><![endif]-->
<link rel="alternate" type="application/rss+xml" title="RSS-лента My Controller" href="http://mycontroller.ru/feed/">
<link rel="alternate" type="application/atom+xml" title="Atom-лента My Controller" href="http://mycontroller.ru/feed/atom/"> 
<link rel="pingback" href="http://mycontroller.ru/xmlrpc.php">
<link rel="alternate" type="application/rss+xml" title="My Controller » Лента комментариев к «STM32 GPIO. Использование StdPeriph_Lib»" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/feed/">
<link rel="stylesheet" id="msw_wpfm_scan-css" href="./STM32 GPIO. Использование StdPeriph_Lib_files/wordpress-file-monitor.php" type="text/css" media="all">
<link rel="stylesheet" id="bwp-syntax-css" href="./STM32 GPIO. Использование StdPeriph_Lib_files/bwp-syntax.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-downloadmanager-css" href="./STM32 GPIO. Использование StdPeriph_Lib_files/download-css.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-pagenavi-css" href="./STM32 GPIO. Использование StdPeriph_Lib_files/pagenavi-css.css" type="text/css" media="all">
<script type="text/javascript" src="./STM32 GPIO. Использование StdPeriph_Lib_files/jquery.js"></script>
<script type="text/javascript" src="./STM32 GPIO. Использование StdPeriph_Lib_files/bwp-syntax.js"></script>
<script type="text/javascript" src="./STM32 GPIO. Использование StdPeriph_Lib_files/external-tracking.min.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://mycontroller.ru/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://mycontroller.ru/wp-includes/wlwmanifest.xml"> 
<link rel="prev" title="Использование StdPeriph_Lib" href="http://mycontroller.ru/ispolzovanie-stdperiph_lib/">
<link rel="next" title="STM32 USART. Использование StdPeriph_Lib" href="http://mycontroller.ru/stm32-usart-ispolzovanie-stdperiph_lib/">
<meta name="generator" content="WordPress 3.3.1">
<link rel="canonical" href="./STM32 GPIO. Использование StdPeriph_Lib_files/STM32 GPIO. Использование StdPeriph_Lib.htm">
<link rel="shortlink" href="http://mycontroller.ru/?p=2862">

<link rel="stylesheet" href="./STM32 GPIO. Использование StdPeriph_Lib_files/wp-syntax.css" type="text/css" media="screen">
<!-- wpSpoiler Code -->
        <script type="text/javascript">
            function wpSpoilerToggle(spoiler, link, showtext, hidetext) {
                if (spoiler.style.display != 'none') {
                    spoiler.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'spoiler_link_show';
                } else {
                    spoiler.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'spoiler_link_hide';
                }
            }
          </script>
	<link type="text/css" rel="stylesheet" href="./STM32 GPIO. Использование StdPeriph_Lib_files/shCore.css">
	<link type="text/css" rel="stylesheet" href="./STM32 GPIO. Использование StdPeriph_Lib_files/shThemeDefault.css">
<!-- Google Analytics Tracking by Google Analyticator 6.0.2: http://ronaldheft.com/code/analyticator/ -->
<script type="text/javascript">window.google_analytics_uacct = "UA-29082067-1";</script>
<script type="text/javascript">
	var analyticsFileTypes = [''];
	var analyticsEventTracking = 'enabled';
</script>
<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-29082067-1']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
</script><script type="text/javascript" async="" src="./STM32 GPIO. Использование StdPeriph_Lib_files/ga.js"></script>
</head>
<body>
<div id="art-page-background-simple-gradient">
</div>
<div id="art-main">
<div class="art-Sheet">
    <div class="art-Sheet-tl"></div>
    <div class="art-Sheet-tr"></div>
    <div class="art-Sheet-bl"></div>
    <div class="art-Sheet-br"></div>
    <div class="art-Sheet-tc"></div>
    <div class="art-Sheet-bc"></div>
    <div class="art-Sheet-cl"></div>
    <div class="art-Sheet-cr"></div>
    <div class="art-Sheet-cc"></div>
    <div class="art-Sheet-body">
<div class="art-Header">
    <div class="art-Header-png"></div>
    <div class="art-Header-jpeg"></div>
<div class="art-Logo">
    <h1 id="name-text" class="art-Logo-name">
        <a href="http://mycontroller.ru/">My Controller</a></h1>
    <div id="slogan-text" class="art-Logo-text">
        Изучаем микроконтроллеры STM32</div>
</div>

</div>
<div class="art-nav">
	<div class="l"></div>
	<div class="r"></div>
	<ul class="art-menu">
		<li><a href="http://mycontroller.ru/"><span class="l"></span><span class="r"></span><span class="t">Home</span></a></li><li><span class="art-menu-separator"></span></li><li class="page_item page-item-10"><a href="http://mycontroller.ru/o-sayte/"><span class="l"></span><span class="r"></span><span class="t">О сайте</span></a></li><li><span class="art-menu-separator"></span></li>
<li class="page_item page-item-186"><a href="http://mycontroller.ru/programmyi/"><span class="l"></span><span class="r"></span><span class="t">СОФТ</span></a></li>
	</ul>
</div>
<div class="art-contentLayout">
<div class="art-content">

<div class="art-Post">
    <div class="art-Post-tl"></div>
    <div class="art-Post-tr"></div>
    <div class="art-Post-bl"></div>
    <div class="art-Post-br"></div>
    <div class="art-Post-tc"></div>
    <div class="art-Post-bc"></div>
    <div class="art-Post-cl"></div>
    <div class="art-Post-cr"></div>
    <div class="art-Post-cc"></div>
    <div class="art-Post-body">
<div class="art-Post-inner art-article">

<div class="art-PostContent">

<div class="navigation">
	<div class="alignleft">« <a href="http://mycontroller.ru/ispolzovanie-stdperiph_lib/" rel="prev">Использование StdPeriph_Lib</a></div>
	<div class="alignright"><a href="http://mycontroller.ru/stm32-usart-ispolzovanie-stdperiph_lib/" rel="next">STM32 USART. Использование StdPeriph_Lib</a> »</div>
</div>

</div>
<div class="cleared"></div>


</div>

		<div class="cleared"></div>
    </div>
</div>

<div class="art-Post">
    <div class="art-Post-tl"></div>
    <div class="art-Post-tr"></div>
    <div class="art-Post-bl"></div>
    <div class="art-Post-br"></div>
    <div class="art-Post-tc"></div>
    <div class="art-Post-bc"></div>
    <div class="art-Post-cl"></div>
    <div class="art-Post-cr"></div>
    <div class="art-Post-cc"></div>
    <div class="art-Post-body">
<div class="art-Post-inner art-article">
<h2 class="art-PostHeader">
<a href="./STM32 GPIO. Использование StdPeriph_Lib_files/STM32 GPIO. Использование StdPeriph_Lib.htm" rel="bookmark" title="Постоянная ссылка на STM32 GPIO. Использование StdPeriph_Lib">
STM32 GPIO. Использование StdPeriph_Lib</a>
</h2>
<div class="art-PostContent">

          <p>Для работы с портами ввода/вывода посредством стандартных библиотечных ф-й понадобятся следующие файлы:</p>
<ul>
<li>stm32f10x_gpio.h&nbsp; и&nbsp; stm32f10x_gpio.c<font color="#000000"> – для работы с портами;</font> </li>
<li>stm32f10x_rcc.c и stm32f10x_rcc.h – для управления тактированием портов. </li>
</ul>
<p>Имеется ряд функций для работы с портами. Ниже приводится описание каждой.</p>
<p><span id="more-2862"></span>
</p><p align="left"><font style="font-weight: bold">GPIO_Init</font> – инициализация порта или его отдельных пинов.</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">void</span> GPIO_Init <span style="color: #009900;">(</span>GPIO_TypeDef<span style="color: #339933;">*</span> GPIOx<span style="color: #339933;">,</span> GPIO_InitTypeDef<span style="color: #339933;">*</span> GPIO_InitStruct <span style="color: #009900;">)</span></pre></div></div>

<p>Чтобы разобраться с работой этой функции, необходимо ввести понятие инициализационной структуры. Именно эта структура передается функции в качестве второго аргумента. Данная структура имеет следующий вид:</p>

<div class="wp_syntax"><table><tbody><tr><td class="line_numbers"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">typedef</span> <span style="color: #993333;">struct</span> 
<span style="color: #009900;">{</span>
  <span style="color: #993333;">uint16_t</span> GPIO_Pin<span style="color: #339933;">;</span>              <span style="color: #666666; font-style: italic;">//номер вывода или группы выводов, которые инициализируем</span>
  GPIOSpeed_TypeDef GPIO_Speed<span style="color: #339933;">;</span>   <span style="color: #666666; font-style: italic;">//задает частоту сигнала, на которой работает вывод</span>
  GPIOMode_TypeDef  GPIO_Mode<span style="color: #339933;">;</span>    <span style="color: #666666; font-style: italic;">//задает режим работы вывода</span>
<span style="color: #009900;">}</span> GPIO_InitTypeDef <span style="color: #339933;">;</span></pre></td></tr></tbody></table></div>

<p>Немного подробнее о полях инициализационной структуры. </p>
<p>Поле <em>GPIO_Mode</em> может принимать следующие значения:</p>
<ul>
<li><a></a>GPIO_Mode_AIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — аналоговый вход; </li>
<li><a></a>GPIO_Mode_IN_FLOATING&nbsp; — цифровой&nbsp; вход, третье состояние; </li>
<li><a></a>GPIO_Mode_IPD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — цифровой вход, подтяжка к земле; </li>
<li><a></a>GPIO_Mode_IPU&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — цифровой вход, подтяжка к плюсу питания; </li>
<li><a></a>GPIO_Mode_Out_OD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — выход общего назначения, открытый сток; </li>
<li><a></a>GPIO_Mode_Out_PP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — симметричный выход общего назначения; </li>
<li><a></a>GPIO_Mode_AF_OD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp; выход альтернативной ф-ии, открытый сток; </li>
<li><a></a>GPIO_Mode_AF_PP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp; симметричный выход альтернативной ф-ии </li>
</ul>
<p>Поле <em>GPIO_Speed</em> задает скорость работы вывода настроенного как выход и может принимать следующие значения:</p>
<ul>
<li><a></a>GPIO_Speed_10MHz </li>
<li><a></a>GPIO_Speed_2MHz </li>
<li><a></a>GPIO_Speed_50MHz </li>
</ul>
<p><font color="#0a1c1f">Поле <em>GPIO_Pin</em> определяет номер вывода, который инициализируем. Может принимать следующие значения:</font></p>
<ul>
<li>GPIO_Pin_0 </li>
<li>GPIO_Pin_1 </li>
<li>GPIO_Pin_2 </li>
<li>GPIO_Pin_3 </li>
<li>GPIO_Pin_4 </li>
<li>GPIO_Pin_5 </li>
<li>GPIO_Pin_6 </li>
<li>GPIO_Pin_7 </li>
<li>GPIO_Pin_8 </li>
<li>GPIO_Pin_9 </li>
<li>GPIO_Pin_10 </li>
<li>GPIO_Pin_11 </li>
<li>GPIO_Pin_12 </li>
<li>GPIO_Pin_13 </li>
<li>GPIO_Pin_14 </li>
<li>GPIO_Pin_15 </li>
<li>GPIO_Pin_All </li>
</ul>
<p><font color="#0a1c1f">Я думаю, что этот список в пояснении не нуждается, за исключением последнего варианта — GPIO_Pin_All. Данное значение присваивается, когда необходимо инициализировать весь порт.</font></p>
<p>Рассмотрим пример использования ф-ии GPIO_Init. Предположим, необходимо настроить вывод 2 порта PORTB для работы в качестве симметричного вывода общего назначения с максимальной частотой переключения 50 МГц:</p>

<div class="wp_syntax"><table><tbody><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre class="c" style="font-family:monospace;">GPIO_InitTypeDef  GPIO_InitStructure<span style="color: #339933;">;</span>                 <span style="color: #666666; font-style: italic;">//обьявляем структуру</span>
RCC_APB2PeriphClockCmd<span style="color: #009900;">(</span>RCC_APB2Periph_GPIOB<span style="color: #339933;">,</span> ENABLE<span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">//включаем тактирование порта B</span>
<span style="color: #666666; font-style: italic;">//заполняем поля структуры согласно поставленной задаче</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Pin</span>   <span style="color: #339933;">=</span> GPIO_Pin_2<span style="color: #339933;">;</span>           <span style="color: #666666; font-style: italic;">//задаем номер вывода</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Mode</span>  <span style="color: #339933;">=</span> GPIO_Mode_Out_PP<span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">//режим работы</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Speed</span> <span style="color: #339933;">=</span> GPIO_Speed_50MHz<span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">//скорость </span>
GPIO_Init<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span> <span style="color: #339933;">&amp;</span>GPIO_InitStructure<span style="color: #009900;">)</span><span style="color: #339933;">;</span>                <span style="color: #666666; font-style: italic;">//вызов функции инициализации</span></pre></td></tr></tbody></table></div>

<p>В качестве аргумента функции выступает имя порта и указатель на инициализационную структуру.</p>
<p>Если нужно одновременно инициализировать несколько выводов порта, то необходимо переменной GPIO_InitStructure.GPIO_Pin присвоить соответствующее значение. Например, необходимо настроить одинаково вывода 2 и 3. Это будет выглядеть следующим образом:</p>
<p>GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; </p>
<p>&nbsp;</p>
<p align="left"><strong>GPIO_WriteBit</strong> – для управления выводами порта (установка в единицу или ноль)</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"> <span style="color: #993333;">void</span> GPIO_WriteBit <span style="color: #009900;">(</span> GPIO_TypeDef <span style="color: #339933;">*</span> GPIOx<span style="color: #339933;">,</span> <span style="color: #993333;">uint16_t</span> GPIO_Pin<span style="color: #339933;">,</span> BitAction BitVal <span style="color: #009900;">)</span></pre></div></div>

<ul>
<li>GPIOx – имя порта, к которому обращаемся (х может принимать значение от A до G, зависит от&nbsp;&nbsp; конкретного контроллера); </li>
<li>GPIO_Pin – определяет номера вывода (или группы выводов), которым управляем; </li>
<li>BitVal – состояние, в которое нужно перевести вывод. Может принимать значения: Bit_RESET или Bit_SET; </li>
</ul>
<p><font color="#0a1c1f">Пример использования данной функции:</font></p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;">GPIO_WriteBit<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span> GPIO_Pin_2<span style="color: #339933;">,</span> Bit_SET<span style="color: #009900;">)</span><span style="color: #339933;">;</span>      <span style="color: #666666; font-style: italic;">//установить GPIOB.2</span>
GPIO_WriteBit<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span> GPIO_Pin_2<span style="color: #339933;">,</span> Bit_RESET<span style="color: #009900;">)</span><span style="color: #339933;">;</span>    <span style="color: #666666; font-style: italic;">//сбросить   GPIOB.2</span></pre></div></div>

<p align="left"><font style="font-weight: bold">GPIO_ResetBits, GPIO_SetBits</font> – сброс и установка выбранных битов порта</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">void</span> GPIO_ResetBits<span style="color: #009900;">(</span>GPIO_TypeDef <span style="color: #339933;">*</span> GPIOx<span style="color: #339933;">,</span><span style="color: #993333;">uint16_t</span> GPIO_Pin<span style="color: #009900;">)</span>  <span style="color: #666666; font-style: italic;">//сброс выбранного вывода порта</span>
<span style="color: #993333;">void</span> GPIO_SetBits  <span style="color: #009900;">(</span>GPIO_TypeDef <span style="color: #339933;">*</span> GPIOx<span style="color: #339933;">,</span><span style="color: #993333;">uint16_t</span> GPIO_Pin<span style="color: #009900;">)</span>  <span style="color: #666666; font-style: italic;">//установка выбранного вывода порта</span></pre></div></div>

<p><strong>GPIO_ReadInputDataBit</strong>&nbsp; — чтение состояния выбранного вывода порта</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">uint8_t</span> GPIO_ReadInputDataBit  <span style="color: #009900;">(</span>GPIO_TypeDef <span style="color: #339933;">*</span>  GPIOx<span style="color: #339933;">,</span> <span style="color: #993333;">uint16_t</span>  GPIO_Pin<span style="color: #009900;">)</span></pre></div></div>

<p>С помощью аргумента GPIOx задается имя порта, а аргумента GPIO_Pin – номер вывода порта. Результат функции – состояние вывода порта (0 или 1)</p>
<p><strong>GPIO_ReadInputData</strong> — чтение состояния выбранного порта</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">uint16_t</span> GPIO_ReadInputData  <span style="color: #009900;">(</span>GPIO_TypeDef <span style="color: #339933;">*</span>  GPIOx<span style="color: #009900;">)</span></pre></div></div>

<p>В отличии от предыдущей команды, позволяет прочитать все 16 разрядов выбранного порта</p>
<p>&nbsp;</p>
<p><strong>GPIO_ReadOutputDataBit</strong>&nbsp;&nbsp; — чтение&nbsp; состояния одного бита регистра данных порта</p>
<p><strong>GPIO_ReadOutputData</strong> — чтение состояния всего регистра данных порта</p>
<p>&nbsp;</p>
<p>Приведенные выше функции являются одними из наиболее используемых. На основании их напишем фрагмент программы, которая посредством кнопки, подключенной между GPIOA.2 и землей, управляет светодиодом, подключенным между GPIOB.6 и землей через ограничительный резистор. При нажатии на кнопку состояние светодиода должно меняться на противоположное.</p>

<div class="wp_syntax"><table><tbody><tr><td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre class="c" style="font-family:monospace;">GPIO_InitTypeDef  GPIO_InitStructure<span style="color: #339933;">;</span>                 <span style="color: #666666; font-style: italic;">//обьявляем инициализационную структуру</span>
<span style="color: #666666; font-style: italic;">//инициализировать вывод порта, к которому подключена кнопка</span>
RCC_APB2PeriphClockCmd<span style="color: #009900;">(</span>RCC_APB2Periph_GPIOA<span style="color: #339933;">,</span> ENABLE<span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">//включаем тактирование порта A</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Pin</span>   <span style="color: #339933;">=</span> GPIO_Pin_2<span style="color: #339933;">;</span>           <span style="color: #666666; font-style: italic;">//задаем номер вывода</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Mode</span>  <span style="color: #339933;">=</span> GPIO_Mode_IPU<span style="color: #339933;">;</span>        <span style="color: #666666; font-style: italic;">//цифровой вход, подтяжка к плюсу</span>
GPIO_Init<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span> <span style="color: #339933;">&amp;</span>GPIO_InitStructure<span style="color: #009900;">)</span><span style="color: #339933;">;</span>                <span style="color: #666666; font-style: italic;">//вызов функции инициализации</span>
<span style="color: #666666; font-style: italic;">//инициализировать вывод порта, к которому подключен светодиод</span>
RCC_APB2PeriphClockCmd<span style="color: #009900;">(</span>RCC_APB2Periph_GPIOB<span style="color: #339933;">,</span> ENABLE<span style="color: #009900;">)</span><span style="color: #339933;">;</span> <span style="color: #666666; font-style: italic;">//включаем тактирование порта B</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Pin</span>   <span style="color: #339933;">=</span> GPIO_Pin_6<span style="color: #339933;">;</span>           <span style="color: #666666; font-style: italic;">//задаем номер вывода</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Mode</span>  <span style="color: #339933;">=</span> GPIO_Mode_Out_PP<span style="color: #339933;">;</span>     <span style="color: #666666; font-style: italic;">//симметричный выход общего назначения</span>
GPIO_InitStructure.<span style="color: #202020;">GPIO_Speed</span> <span style="color: #339933;">=</span> GPIO_Speed_2MHz<span style="color: #339933;">;</span>      <span style="color: #666666; font-style: italic;">//скорость </span>
GPIO_Init<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span> <span style="color: #339933;">&amp;</span>GPIO_InitStructure<span style="color: #009900;">)</span><span style="color: #339933;">;</span>                <span style="color: #666666; font-style: italic;">//вызов функции инициализации</span>
&nbsp;
<span style="color: #666666; font-style: italic;">//бесконечный цикл, в котором проверяется состояние кнопки</span>
<span style="color: #b1b100;">while</span><span style="color: #009900;">(</span><span style="color: #0000dd;">1</span><span style="color: #009900;">)</span>
<span style="color: #009900;">{</span>
  <span style="color: #b1b100;">if</span><span style="color: #009900;">(</span>GPIO_ReadInputDataBit<span style="color: #009900;">(</span>GPIOA<span style="color: #339933;">,</span>GPIO_Pin_2<span style="color: #009900;">)</span><span style="color: #339933;">==</span><span style="color: #0000dd;">0</span><span style="color: #009900;">)</span>      <span style="color: #666666; font-style: italic;">//нажата кнопка</span>
  <span style="color: #009900;">{</span>
&nbsp;
    <span style="color: #666666; font-style: italic;">//меняем состояние светодиода на противоположное</span>
    <span style="color: #b1b100;">if</span><span style="color: #009900;">(</span>GPIO_ReadOutputDataBit<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span>GPIO_Pin_6<span style="color: #009900;">)</span><span style="color: #009900;">)</span> GPIO_ResetBits<span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span>GPIO_Pin_6<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
    <span style="color: #b1b100;">else</span>                                         GPIO_SetBits  <span style="color: #009900;">(</span>GPIOB<span style="color: #339933;">,</span>GPIO_Pin_6<span style="color: #009900;">)</span><span style="color: #339933;">;</span>
&nbsp;
    delay_ms<span style="color: #009900;">(</span><span style="color: #0000dd;">100</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>                                    <span style="color: #666666; font-style: italic;">//задержка против дребезга</span>
    <span style="color: #b1b100;">while</span><span style="color: #009900;">(</span>GPIO_ReadInputDataBit<span style="color: #009900;">(</span>GPIOA<span style="color: #339933;">,</span>GPIO_Pin_2<span style="color: #009900;">)</span><span style="color: #339933;">==</span><span style="color: #0000dd;">0</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span><span style="color: #666666; font-style: italic;">//ждать отпускания кнопки</span>
    delay_ms<span style="color: #009900;">(</span><span style="color: #0000dd;">100</span><span style="color: #009900;">)</span><span style="color: #339933;">;</span>                                    <span style="color: #666666; font-style: italic;">//задержка против дребезга</span>
  <span style="color: #009900;">}</span>
<span style="color: #009900;">}</span></pre></td></tr></tbody></table></div>

<p>Есть другой, более "красивый" способ инвертирования состояния выхода:</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;">GPIOB<span style="color: #339933;">-&gt;</span>ODR <span style="color: #339933;">^=</span> GPIO_Pin_6<span style="color: #339933;">;</span></pre></div></div>

<p>Приведенный выше пример ожидания нажатия кнопки является далеко не оптимальным. Было бы правильно организовать проверку состояния вывода в обработчике прерывания таймера. Цель этого примера – проиллюстрировать использование библиотечных ф-й для работы с портами и не более того.</p>
<p>&nbsp;</p>
<p>Рассмотрим оставшиеся функции.</p>
<p><strong>GPIO_PinLockConfig</strong> – защита выбранной конфигурации вывода порта</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"> <span style="color: #993333;">void</span> GPIO_PinLockConfig  <span style="color: #009900;">(</span>GPIO_TypeDef <span style="color: #339933;">*</span>  GPIOx<span style="color: #339933;">,</span> <span style="color: #993333;">uint16_t</span>  GPIO_Pin<span style="color: #009900;">)</span></pre></div></div>

<p>После вызова этой функции конфигурация выбранного вывода порта будет защищена от дальнейших изменений. Отключение защиты произойдет только после системного сброса.</p>
<p>&nbsp;</p>
<p><strong>GPIO_PinRemapConfig</strong> – управляет подключением периферийных устройств к альтернативным выводам</p>
<p>По умолчанию за периферийными устройствами закреплены определенные выводы контроллера. Например, сигналы RX и TX модуля USART1 по умолчанию подключены к выводам PA10, PA9 соответственно. Но есть возможность подключить эти сигналы к другим выводам – PB7, PB6. Рассматриваемая ф-я как раз позволяет выполнять подключение к основным выводам или альтернативным. Она имеет следующий вид:</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;"><span style="color: #993333;">void</span> GPIO_PinRemapConfig  <span style="color: #009900;">(</span><span style="color: #993333;">uint32_t</span> GPIO_Remap<span style="color: #339933;">,</span> FunctionalState NewState<span style="color: #009900;">)</span></pre></div></div>

<p><em>GPIO_Remap</em> указывает на&nbsp; периферийное устройство, подключение которого будем переназначать.</p>
<p><em>NewState</em> определяет действие: ENABLE – подключить к альтернативному набору выводов, DISABLE – вернуться к основному набору.</p>
<p>Например, чтобы подключить USART1 к альтернативным выводам необходимо выполнить следующее:</p>

<div class="wp_syntax"><div class="code"><pre class="c" style="font-family:monospace;">GPIO_PinRemapConfig <span style="color: #009900;">(</span>GPIO_Remap_USART1<span style="color: #339933;">,</span>ENABLE<span style="color: #009900;">)</span><span style="color: #339933;">;</span></pre></div></div>

<p>Приведу имена GPIO_Remap для некоторых периферийных устройств:</p>
<ul>
<li>GPIO_Remap_SPI1</li>
<li>GPIO_Remap_I2C1</li>
<li>GPIO_Remap_USART1</li>
<li>GPIO_Remap_USART2</li>
<li>GPIO_PartialRemap_USART3</li>
<li>GPIO_FullRemap_USART3</li>
<li>GPIO_PartialRemap_TIM1</li>
<li>GPIO_FullRemap_TIM1</li>
<li>GPIO_PartialRemap1_TIM2</li>
<li>GPIO_FullRemap_TIM2</li>
</ul>
<p>Полный список этих имен находится в файле stm32f10x_gpio.h</p>
                  
</div>
<div class="cleared"></div>
<div class="art-PostFooterIcons art-metadata-icons">
Рубрика: <a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/portyi-vvoda-vyivoda/" title="Просмотреть все записи в рубрике «GPIO»" rel="category tag">GPIO</a>, <a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/" title="Просмотреть все записи в рубрике «МИКРОКОНТРОЛЛЕРЫ STM32»" rel="category tag">МИКРОКОНТРОЛЛЕРЫ STM32</a>
</div>

</div>

		<div class="cleared"></div>
    </div>
</div>


<!-- You can start editing here. -->


<div class="art-Post">
    <div class="art-Post-tl"></div>
    <div class="art-Post-tr"></div>
    <div class="art-Post-bl"></div>
    <div class="art-Post-br"></div>
    <div class="art-Post-tc"></div>
    <div class="art-Post-bc"></div>
    <div class="art-Post-cl"></div>
    <div class="art-Post-cr"></div>
    <div class="art-Post-cc"></div>
    <div class="art-Post-body">
<div class="art-Post-inner art-article">

<div class="art-PostContent">

<h3 id="comments">Комментарии (5) на “STM32 GPIO. Использование StdPeriph_Lib”</h3>



</div>
<div class="cleared"></div>


</div>

		<div class="cleared"></div>
    </div>
</div>


	<ul class="commentlist">
       <li class="comment even thread-even depth-1" id="li-comment-1016">
     <div id="comment-1016">
<div class="art-Post">
         <div class="art-Post-tl"></div>
         <div class="art-Post-tr"></div>
         <div class="art-Post-bl"></div>
         <div class="art-Post-br"></div>
         <div class="art-Post-tc"></div>
         <div class="art-Post-bc"></div>
         <div class="art-Post-cl"></div>
         <div class="art-Post-cr"></div>
         <div class="art-Post-cc"></div>
         <div class="art-Post-body">
     <div class="art-Post-inner art-article">
     
<div class="art-PostContent">
     
      <div class="comment-author vcard">
                  <cite class="fn">Александр:</cite>
      </div>
      
      <div class="comment-meta commentmetadata"><a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#comment-1016">28.08.2012 в 03:04</a></div>

      <p>А будут примеры с описанием по остальной периферией с использованием StdPeriph_Lib?</p>

      <div class="reply">
         <a class="comment-reply-link" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/?replytocom=1016#respond" onclick="return addComment.moveForm(&quot;comment-1016&quot;, &quot;1016&quot;, &quot;respond&quot;, &quot;2862&quot;)">Ответить</a>      </div>

      </div>
      <div class="cleared"></div>
      

      </div>
      
      		<div class="cleared"></div>
          </div>
      </div>
      
     </div>
<ul class="children">
   <li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="li-comment-1017">
     <div id="comment-1017">
<div class="art-Post">
         <div class="art-Post-tl"></div>
         <div class="art-Post-tr"></div>
         <div class="art-Post-bl"></div>
         <div class="art-Post-br"></div>
         <div class="art-Post-tc"></div>
         <div class="art-Post-bc"></div>
         <div class="art-Post-cl"></div>
         <div class="art-Post-cr"></div>
         <div class="art-Post-cc"></div>
         <div class="art-Post-body">
     <div class="art-Post-inner art-article">
     
<div class="art-PostContent">
     
      <div class="comment-author vcard">
                  <cite class="fn">kontroller:</cite>
      </div>
      
      <div class="comment-meta commentmetadata"><a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#comment-1017">28.08.2012 в 05:26</a></div>

      <p>Так вот сейчас потихоньку работаю над этим</p>

      <div class="reply">
         <a class="comment-reply-link" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/?replytocom=1017#respond" onclick="return addComment.moveForm(&quot;comment-1017&quot;, &quot;1017&quot;, &quot;respond&quot;, &quot;2862&quot;)">Ответить</a>      </div>

      </div>
      <div class="cleared"></div>
      

      </div>
      
      		<div class="cleared"></div>
          </div>
      </div>
      
     </div>
</li>
</ul>
</li>
   <li class="comment even thread-odd thread-alt depth-1" id="li-comment-1018">
     <div id="comment-1018">
<div class="art-Post">
         <div class="art-Post-tl"></div>
         <div class="art-Post-tr"></div>
         <div class="art-Post-bl"></div>
         <div class="art-Post-br"></div>
         <div class="art-Post-tc"></div>
         <div class="art-Post-bc"></div>
         <div class="art-Post-cl"></div>
         <div class="art-Post-cr"></div>
         <div class="art-Post-cc"></div>
         <div class="art-Post-body">
     <div class="art-Post-inner art-article">
     
<div class="art-PostContent">
     
      <div class="comment-author vcard">
                  <cite class="fn">Сергей:</cite>
      </div>
      
      <div class="comment-meta commentmetadata"><a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#comment-1018">28.08.2012 в 09:16</a></div>

      <p>Спасибо, отличная статья. А то вообще не хочется разбираться с их библиотеками, приятнее напрямую регистры руками править, а так благодаря Вам может и разберусь с ними.</p>

      <div class="reply">
         <a class="comment-reply-link" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/?replytocom=1018#respond" onclick="return addComment.moveForm(&quot;comment-1018&quot;, &quot;1018&quot;, &quot;respond&quot;, &quot;2862&quot;)">Ответить</a>      </div>

      </div>
      <div class="cleared"></div>
      

      </div>
      
      		<div class="cleared"></div>
          </div>
      </div>
      
     </div>
</li>
   <li class="comment odd alt thread-even depth-1" id="li-comment-1253">
     <div id="comment-1253">
<div class="art-Post">
         <div class="art-Post-tl"></div>
         <div class="art-Post-tr"></div>
         <div class="art-Post-bl"></div>
         <div class="art-Post-br"></div>
         <div class="art-Post-tc"></div>
         <div class="art-Post-bc"></div>
         <div class="art-Post-cl"></div>
         <div class="art-Post-cr"></div>
         <div class="art-Post-cc"></div>
         <div class="art-Post-body">
     <div class="art-Post-inner art-article">
     
<div class="art-PostContent">
     
      <div class="comment-author vcard">
                  <cite class="fn">Олег:</cite>
      </div>
      
      <div class="comment-meta commentmetadata"><a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#comment-1253">25.09.2012 в 14:44</a></div>

      <p>А можно скажем замапить 32 пина (скажем порт А и В) как 1 порт ?<br>
Т.е. скажем вывести 32-битное число в порт Х  и на выходе портов А и В (32 пина) получить результат ?</p>

      <div class="reply">
         <a class="comment-reply-link" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/?replytocom=1253#respond" onclick="return addComment.moveForm(&quot;comment-1253&quot;, &quot;1253&quot;, &quot;respond&quot;, &quot;2862&quot;)">Ответить</a>      </div>

      </div>
      <div class="cleared"></div>
      

      </div>
      
      		<div class="cleared"></div>
          </div>
      </div>
      
     </div>
<ul class="children">
   <li class="comment byuser comment-author-admin bypostauthor even depth-2" id="li-comment-1255">
     <div id="comment-1255">
<div class="art-Post">
         <div class="art-Post-tl"></div>
         <div class="art-Post-tr"></div>
         <div class="art-Post-bl"></div>
         <div class="art-Post-br"></div>
         <div class="art-Post-tc"></div>
         <div class="art-Post-bc"></div>
         <div class="art-Post-cl"></div>
         <div class="art-Post-cr"></div>
         <div class="art-Post-cc"></div>
         <div class="art-Post-body">
     <div class="art-Post-inner art-article">
     
<div class="art-PostContent">
     
      <div class="comment-author vcard">
                  <cite class="fn">kontroller:</cite>
      </div>
      
      <div class="comment-meta commentmetadata"><a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#comment-1255">25.09.2012 в 17:37</a></div>

      <p>В смысле, одной командой вывести данные на два порта?</p>

      <div class="reply">
         <a class="comment-reply-link" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/?replytocom=1255#respond" onclick="return addComment.moveForm(&quot;comment-1255&quot;, &quot;1255&quot;, &quot;respond&quot;, &quot;2862&quot;)">Ответить</a>      </div>

      </div>
      <div class="cleared"></div>
      

      </div>
      
      		<div class="cleared"></div>
          </div>
      </div>
      
     </div>
</li>
</ul>
</li>
  </ul>


 

<div class="art-Post">
    <div class="art-Post-tl"></div>
    <div class="art-Post-tr"></div>
    <div class="art-Post-bl"></div>
    <div class="art-Post-br"></div>
    <div class="art-Post-tc"></div>
    <div class="art-Post-bc"></div>
    <div class="art-Post-cl"></div>
    <div class="art-Post-cr"></div>
    <div class="art-Post-cc"></div>
    <div class="art-Post-body">
<div class="art-Post-inner art-article">

<div class="art-PostContent">

<div id="respond">
  
  <h3>Оставить комментарий</h3>

<div class="cancel-comment-reply">
	<small><a rel="nofollow" id="cancel-comment-reply-link" href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#respond" style="display:none;">Нажмите, чтобы отменить ответ.</a></small>
</div>


<form action="http://mycontroller.ru/wp-comments-post.php" method="post" id="commentform">


<p><input type="text" name="author" id="author" value="" size="22" tabindex="1">
<label for="author"><small>Имя </small></label></p>

<p><input type="text" name="email" id="email" value="" size="22" tabindex="2">
<label for="email"><small>E-mail (не публикуется) </small></label></p>

<p><input type="text" name="url" id="url" value="" size="22" tabindex="3">
<label for="url"><small>Web-сайт</small></label></p>


<!--<p><small><strong>XHTML:</strong> Вы можете использовать эту разметку: <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code lang=&quot;&quot;&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; &lt;pre lang=&quot;&quot; extra=&quot;&quot;&gt; </code></small></p>-->

<p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p>

<p>
	<span class="art-button-wrapper">
		<span class="l"> </span>
		<span class="r"> </span>
		<input class="art-button" type="submit" name="submit" tabindex="5" value="Отправить">
	</span>
<input type="hidden" name="comment_post_ID" value="2862" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p>

</form>

</div>

</div>
<div class="cleared"></div>


</div>

		<div class="cleared"></div>
    </div>
</div>


</div>
<div class="art-sidebar1">      
<div id="mycategoryorder-2" class="widget widget_mycategoryorder"><div class="art-Block">
    <div class="art-Block-body">
<div class="art-BlockHeader">
    <div class="l"></div>
    <div class="r"></div>
    <div class="art-header-tag-icon">
        <div class="t">Рубрики</div>
    </div>
</div><div class="art-BlockContent">
    <div class="art-BlockContent-tl"></div>
    <div class="art-BlockContent-tr"></div>
    <div class="art-BlockContent-bl"></div>
    <div class="art-BlockContent-br"></div>
    <div class="art-BlockContent-tc"></div>
    <div class="art-BlockContent-bc"></div>
    <div class="art-BlockContent-cl"></div>
    <div class="art-BlockContent-cr"></div>
    <div class="art-BlockContent-cc"></div>
    <div class="art-BlockContent-body">
		<ul>
			<li class="cat-item cat-item-3"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/" title="Просмотреть все записи в рубрике «МИКРОКОНТРОЛЛЕРЫ STM32»">МИКРОКОНТРОЛЛЕРЫ STM32</a>
<ul class="children">
	<li class="cat-item cat-item-7"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/bootloader/" title="Просмотреть все записи в рубрике «Bootloader»">Bootloader</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/portyi-vvoda-vyivoda/" title="Просмотреть все записи в рубрике «GPIO»">GPIO</a>
</li>
	<li class="cat-item cat-item-4"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/usart/" title="Просмотреть все записи в рубрике «USART»">USART</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/dma/" title="Просмотреть все записи в рубрике «DMA»">DMA</a>
</li>
	<li class="cat-item cat-item-15"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/bkp-registryi/" title="Просмотреть все записи в рубрике «BKP»">BKP</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/rtc/" title="Просмотреть все записи в рубрике «RTC»">RTC</a>
</li>
	<li class="cat-item cat-item-16"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/timer/" title="Просмотреть все записи в рубрике «TIMER»">TIMER</a>
</li>
	<li class="cat-item cat-item-21"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/spi/" title="Просмотреть все записи в рубрике «SPI»">SPI</a>
</li>
	<li class="cat-item cat-item-24"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/adc/" title="Просмотреть все записи в рубрике «ADC»">ADC</a>
</li>
	<li class="cat-item cat-item-25"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/dac/" title="Просмотреть все записи в рубрике «DAC»">DAC</a>
</li>
	<li class="cat-item cat-item-26"><a href="http://mycontroller.ru/category/mikrokontrolleryi-stm32/usb/" title="Просмотреть все записи в рубрике «USB»">USB</a>
</li>
</ul>
</li>
	<li class="cat-item cat-item-19"><a href="http://mycontroller.ru/category/vneshnie-ustroystva/" title="Просмотреть все записи в рубрике «ВНЕШНИЕ УСТРОЙСТВА»">ВНЕШНИЕ УСТРОЙСТВА</a>
<ul class="children">
	<li class="cat-item cat-item-23"><a href="http://mycontroller.ru/category/vneshnie-ustroystva/termodatchik-ds18b20/" title="Просмотреть все записи в рубрике «Термодатчик ds18b20»">Термодатчик ds18b20</a>
</li>
	<li class="cat-item cat-item-29"><a href="http://mycontroller.ru/category/vneshnie-ustroystva/enkoder/" title="Просмотреть все записи в рубрике «Энкодер»">Энкодер</a>
</li>
	<li class="cat-item cat-item-20"><a href="http://mycontroller.ru/category/vneshnie-ustroystva/karta-pamyati-sd/" title="Просмотреть все записи в рубрике «Карта памяти SD»">Карта памяти SD</a>
	<ul class="children">
	<li class="cat-item cat-item-31"><a href="http://mycontroller.ru/category/vneshnie-ustroystva/karta-pamyati-sd/rabota-s-ffatfs/" title="Просмотреть все записи в рубрике «Работа с FatFs»">Работа с FatFs</a>
</li>
	</ul>
</li>
</ul>
</li>
	<li class="cat-item cat-item-1"><a href="http://mycontroller.ru/category/bez-rubriki/" title="Просмотреть все записи в рубрике «МОИ ПРОЕКТЫ»">МОИ ПРОЕКТЫ</a>
<ul class="children">
	<li class="cat-item cat-item-6"><a href="http://mycontroller.ru/category/bez-rubriki/chasyi-na-stm32f100rb/" title="Просмотреть все записи в рубрике «Часы на STM32F100RB»">Часы на STM32F100RB</a>
</li>
	<li class="cat-item cat-item-28"><a href="http://mycontroller.ru/category/bez-rubriki/umnyiy-dom/" title="Просмотреть все записи в рубрике «Умный Дом»">Умный Дом</a>
</li>
	<li class="cat-item cat-item-30"><a href="http://mycontroller.ru/category/bez-rubriki/waveplayer/" title="Просмотреть все записи в рубрике «WavePlayer»">WavePlayer</a>
</li>
</ul>
</li>
	<li class="cat-item cat-item-10"><a href="http://mycontroller.ru/category/poleznyiy-soft/" title="Просмотреть все записи в рубрике «ПОЛЕЗНЫЙ СОФТ»">ПОЛЕЗНЫЙ СОФТ</a>
<ul class="children">
	<li class="cat-item cat-item-11"><a href="http://mycontroller.ru/category/poleznyiy-soft/stm32-generator-koda/" title="Просмотреть все записи в рубрике «STM32 генератор»">STM32 генератор</a>
</li>
</ul>
</li>
		</ul>
		
		<div class="cleared"></div>
    </div>
</div>

		<div class="cleared"></div>
    </div>
</div>
</div>		<div id="recent-posts-2" class="widget widget_recent_entries"><div class="art-Block">
    <div class="art-Block-body">
		<div class="art-BlockHeader">
    <div class="l"></div>
    <div class="r"></div>
    <div class="art-header-tag-icon">
        <div class="t">Свежие записи</div>
    </div>
</div><div class="art-BlockContent">
    <div class="art-BlockContent-tl"></div>
    <div class="art-BlockContent-tr"></div>
    <div class="art-BlockContent-bl"></div>
    <div class="art-BlockContent-br"></div>
    <div class="art-BlockContent-tc"></div>
    <div class="art-BlockContent-bc"></div>
    <div class="art-BlockContent-cl"></div>
    <div class="art-BlockContent-cr"></div>
    <div class="art-BlockContent-cc"></div>
    <div class="art-BlockContent-body">
		<ul>
				<li><a href="http://mycontroller.ru/stm32-generator-koda-novaya-versiya/" title="STM32 Генератор кода. Новая версия">STM32 Генератор кода. Новая версия</a></li>
				<li><a href="http://mycontroller.ru/stm32-generator-koda-konstruktor-komponentov/" title="STM32 “Конструктор компонентов” для “Генератора кода”">STM32 “Конструктор компонентов” для “Генератора кода”</a></li>
				<li><a href="http://mycontroller.ru/stm32-vosproizvedenie-zvuka-rasshirenie-vozmozhnostey-programmyi/" title="STM32 Воспроизведение звука. Расширение возможностей программы">STM32 Воспроизведение звука. Расширение возможностей программы</a></li>
				<li><a href="http://mycontroller.ru/stm32-vosproizvedenie-zvuka-nastroyka-dac/" title="STM32 Воспроизведение звука. Настройка периферии + первый звук">STM32 Воспроизведение звука. Настройка периферии + первый звук</a></li>
				<li><a href="http://mycontroller.ru/stm32-dac-primeryi-ispolzovaniya/" title="STM32 DAC Примеры использования">STM32 DAC Примеры использования</a></li>
				</ul>
		
		<div class="cleared"></div>
    </div>
</div>

		<div class="cleared"></div>
    </div>
</div>
</div><div id="text-5" class="widget widget_text"><div class="art-Block">
    <div class="art-Block-body">
<div class="art-BlockHeader">
    <div class="l"></div>
    <div class="r"></div>
    <div class="art-header-tag-icon">
        <div class="t">Немного рекламы</div>
    </div>
</div><div class="art-BlockContent">
    <div class="art-BlockContent-tl"></div>
    <div class="art-BlockContent-tr"></div>
    <div class="art-BlockContent-bl"></div>
    <div class="art-BlockContent-br"></div>
    <div class="art-BlockContent-tc"></div>
    <div class="art-BlockContent-bc"></div>
    <div class="art-BlockContent-cl"></div>
    <div class="art-BlockContent-cr"></div>
    <div class="art-BlockContent-cc"></div>
    <div class="art-BlockContent-body">
			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "ca-pub-6213925206017237";
/* second */
google_ad_slot = "7273021636";
google_ad_width = 200;
google_ad_height = 200;
//-->
</script>
<script type="text/javascript" src="./STM32 GPIO. Использование StdPeriph_Lib_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:200px;margin:0;padding:0;position:relative;visibility:visible;width:200px"><ins id="aswift_0_anchor" style="display:block;border:none;height:200px;margin:0;padding:0;position:relative;visibility:visible;width:200px"><iframe allowtransparency="true" frameborder="0" height="200" hspace="0" marginwidth="0" marginheight="0" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" scrolling="no" vspace="0" width="200" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;"></iframe></ins></ins></div>
		
		<div class="cleared"></div>
    </div>
</div>

		<div class="cleared"></div>
    </div>
</div>
</div>

<p align="center">

</p>

</div>
</div>
<div class="cleared"></div>

<div class="art-Footer">
    <div class="art-Footer-inner">
                <div class="art-Footer-text">
<p>
<a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#">Contact Us</a> | <a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#">Terms of Use</a> | <a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#">Trademarks</a> | <a href="http://mycontroller.ru/stm32-gpio-ispolzovanie-stdperiph_lib/#">Privacy Statement</a><br>Copyright © 2009 My Controller. All Rights Reserved.</p>
</div>
    </div>
    <div class="art-Footer-background">
    </div>
</div>

		<div class="cleared"></div>
    </div>
</div>
<div class="cleared"></div>
<p class="art-page-footer">Powered by <a href="http://wordpress.org/">WordPress</a> and <a href="http://www.artisteer.com/?p=wordpress_themes">WordPress Theme</a> created with Artisteer.</p>
</div>

<!-- 23 запросов. 0,320 секунд. -->
<div>
<!-- SyntaxHighlighter Stuff -->
<script type="text/javascript" src="./STM32 GPIO. Использование StdPeriph_Lib_files/shCore.js"></script>
<script type="text/javascript">
	SyntaxHighlighter.all();
</script>

</div>


</body></html>